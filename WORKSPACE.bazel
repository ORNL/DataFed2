workspace(
    name = "DataFed2",
    managed_directories = {"@npm": ["node_modules"]},
    )

load("//bazel:bazel_deps.bzl","fetch_dependencies")
fetch_dependencies()

###############################################################
# Enableing CMake build rules
###############################################################
# Documentation is here https://bazelbuild.github.io/rules_foreign_cc/0.7.1/cmake.html
# CMake is useful for building enternal dependencies that do not 
# have defined bazel_rules
load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")
rules_foreign_cc_dependencies()

###############################################################
# CPP 
###############################################################
# Building Boost
load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")
boost_deps()

###############################################################
# Python
###############################################################
# For hermetic versioning import a specific tool chain
load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3_9",
    # Available versions are listed in @rules_python//python:versions.bzl.
    # We recommend using the same version your team is already standardized on.
    python_version = "3.9",
)

load("@python3_9//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

###############################################################
# Javascript tooling
###############################################################

load("@build_bazel_rules_nodejs//:repositories.bzl", "build_bazel_rules_nodejs_dependencies")
build_bazel_rules_nodejs_dependencies()

load("@build_bazel_rules_nodejs//:index.bzl", "node_repositories", "yarn_install")

node_repositories(
    node_version = "16.9.0",
    yarn_version = "1.5.1",
)

yarn_install(
    name = "npm",
    package_json = "//apps/web/javascript:package.json",
    yarn_lock = "//apps/web/javascript:yarn.lock",
    frozen_lockfile = False,
)